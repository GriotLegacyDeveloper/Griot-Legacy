var async = require('async');
var jwt = require('jsonwebtoken');
var userSchema = require('../../schema/User');
var userDeviceLoginSchema = require('../../schema/UserDeviceLogin');
var mapUserInnerCircleSchema = require('../../schema/MapUserInnerCircle');
var mapUserTribeSchema = require('../../schema/MapUserTribe');
const config = require('../../config');
const mail = require('../../modules/sendEmail');
var bcrypt = require('bcryptjs');
var fs = require("fs"); // call fs(file system to access file system of our server)
var mime = require('mime');

module.exports = {
    register: (data, callBack) => {
        if (data) {

            console.log('data.body', data.body);

            var fullName = data.body.fullName;
            var email = data.body.email;
            var phone = data.body.phone;

            var countryCode = data.body.countryCode;

            if ((email != '') || (phone != '')) {
                var userObj = {};
                var em = 0;
                var ph = 0;
                if (email != '') {
                    em = 1;

                }

                if (phone != '') {
                    ph = 1;
                }

                if ((em == 1) && (ph == 1)) {
                    var userObj = { $or: [{ email: email }, { phone: phone }] }
                } else if (em == 1) {
                    var userObj = { email: email };
                    var phone = 0;
                } else {
                    var userObj = { phone: phone };
                }

                console.log('userObj', userObj);


                userSchema.findOne(userObj)
                    .collation({ locale: 'en', strength: 2 })
                    .then(async function (resp) {
                        if (resp == null) {

                            var userAddObj = {
                                fullName: fullName,
                                email: email,
                                countryCode: data.body.countryCode,
                                phone: phone,
                                password: data.body.password,
                                profileImage: '',
                                status: 'INACTIVE',
                                badgeCount: 0,
                                gender: data.body.gender,
                                relationship: data.body.relationship
                            }

                            if ((em == 1) && (ph == 1)) {
                                var userLoginType = 'EMAIL';
                                userAddObj.userLoginType = 'EMAIL';
                            } else if (em == 1) {
                                var userLoginType = 'EMAIL';
                                userAddObj.userLoginType = 'EMAIL';
                            } else {
                                var userLoginType = 'PHONE';
                                userAddObj.userLoginType = 'PHONE';
                            }

                            var date = data.body.dateOfBirth;
                            if ((date != '') && (date != undefined)) {
                                var dateSpl = date.split("/");
                                var month = dateSpl[1];
                                var day = dateSpl[0];
                                var year = dateSpl[2];
                                var dateNew = new Date(`${month}-${day}-${year} 00:00:00`);
                                userAddObj['dateOfBirth'] = dateNew;
                            }

                            new userSchema(userAddObj).save(async function (err, user) {
                                if (err) {
                                    console.log(err);
                                    callBack({
                                        success: false,
                                        STATUSCODE: 500,
                                        message: 'Internal DB error',
                                        response_data: {}
                                    })
                                } else {

                                    if (userLoginType == 'EMAIL') {

                                        var userOtp = await sendVerificationCode(user);

                                        var respData = {
                                            userId: user._id,
                                            sid: '1234'
                                        }
                                    } else {
                                        var userResp = await sendSMS(countryCode, phone);

                                        var respData = {
                                            userId: user._id,
                                            sid: userResp.serviceSid
                                        }
                                    }


                                    if ((em == 1) && (ph == 1)) {
                                        var regMsg = 'Please check your email. We have sent a code to be used to verify your account.';
                                    } else if (em == 1) {
                                        var regMsg = 'Please check your email. We have sent a code to be used to verify your account.';
                                    } else {
                                        var regMsg = 'Please check your phone. We have sent a code to be used to verify your account.';
                                    }


                                    callBack({
                                        success: true,
                                        STATUSCODE: 210,
                                        message: regMsg,
                                        response_data: respData
                                    });

                                }
                            });






                        } else {
                            console.log('Email/phone already exists.');
                            callBack({
                                success: false,
                                STATUSCODE: 422,
                                message: 'Email/phone already exists',
                                response_data: {}
                            })
                        }
                    })
                    .catch(function (err) {
                        console.log(err);
                        callBack({
                            success: false,
                            STATUSCODE: 500,
                            message: 'Something went wrong',
                            response_data: {}
                        })
                    })

            } else {
                callBack({
                    success: false,
                    STATUSCODE: 422,
                    message: 'You have to enter either email or phone',
                    response_data: {}
                })
            }
        }
    },
    login: (data, callBack) => {
        if (data) {
            console.log(data.body);

            var email = data.body.user; //This field is eiter email or username
            var password = data.body.password;
            var appType = data.body.appType;
            var deviceToken = data.body.deviceToken;


            if (/^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/.test(data.body.user)) {
                var loginCond = { email: data.body.user };
                loginUser = 'EMAIL';
                loginErrMsg = 'Invalid email or password'
            }
            else {
                var loginCond = { phone: data.body.user };
                loginUser = 'PHONE';
                loginErrMsg = 'Invalid phone or password'
            }


            userSchema.findOne(loginCond)
                .collation({ locale: 'en', strength: 2 })
                .then(async function (user) {
                    if (user != null) {
                        const comparePass = bcrypt.compareSync(password, user.password);
                        if (comparePass) {
                            //CHECK USER STATUS

                            var checkuserStatus = user.status;
                            if (checkuserStatus == 'INACTIVE') { //USER INACTIVE


                                if (user.userLoginType == 'EMAIL') {

                                    var userOtp = await sendVerificationCode(user);

                                    var respData = {
                                        userId: user._id,
                                        sid: '1234'
                                    }
                                } else {
                                    var userResp = await sendSMS(user.countryCode, user.phone);

                                    var respData = {
                                        userId: user._id,
                                        sid: userResp.serviceSid
                                    }
                                }


                                callBack({
                                    success: true,
                                    STATUSCODE: 210,
                                    message: 'Please check your email/phone. We have sent a code to be used to verify your account.',
                                    response_data: respData
                                });


                            } else if (checkuserStatus == 'WAITING FOR APPROVAL') {

                                callBack({
                                    success: false,
                                    STATUSCODE: 422,
                                    message: 'Your account has been deactivated, please contact admin.',
                                    response_data: {}
                                });


                            } else {
                                //ADD DATA IN USER LOGIN DEVICE TABLE
                                var userDeviceData = {
                                    userId: user._id,
                                    appType: appType,
                                    deviceToken: deviceToken
                                }

                                new userDeviceLoginSchema(userDeviceData).save(async function (err, userDev) {
                                    if (err) {
                                        console.log(err);
                                        callBack({
                                            success: false,
                                            STATUSCODE: 500,
                                            message: 'Something went wrong',
                                            response_data: {}
                                        })
                                    } else {
                                        var loginId = userDev._id;
                                        const authToken = generateToken(user);

                                        let response = {
                                            userDetails: {
                                                fullName: user.fullName,
                                                userName: user.userName,
                                                email: user.email,
                                                countryCode: user.countryCode,
                                                phone: user.phone,
                                                userId: user._id,
                                                loginId: loginId,
                                                profileImage: `${config.fileUrl}profile-pic/` + user.profileImage
                                            },
                                            authToken: authToken
                                        }

                                        if (user.profileImage != '') {
                                            response.userDetails.profileImage = `${config.fileUrl}profile-pic/` + user.profileImage
                                        } else {
                                            response.userDetails.profileImage = ''
                                        }

                                        console.log('response', response);

                                        callBack({
                                            success: true,
                                            STATUSCODE: 200,
                                            message: 'Logged in successfully',
                                            response_data: response
                                        })
                                    }
                                })


                            }
                        } else {
                            console.log('password incorrect');
                            callBack({
                                success: false,
                                STATUSCODE: 422,
                                message: 'Email and/or password is incorrect',
                                response_data: {}
                            })
                        }

                    } else {
                        console.log('Email incorrect');
                        callBack({
                            success: false,
                            STATUSCODE: 422,
                            message: 'Email and/or password is incorrect',
                            response_data: {}
                        })
                    }
                })
                .catch(function (err) {
                    console.log(err);
                    callBack({
                        success: false,
                        STATUSCODE: 500,
                        message: 'Something went wrong',
                        response_data: {}
                    })
                })
        }
    },
    customerVerifyUser: (req, callBack) => {
        if (req) {
            var data = req.body;
            // console.log('data',data);
            // return;


            var userId = data.userId;

            var appType = data.appType;
            var deviceToken = data.deviceToken;

            var sid = data.sid;
            var otp = data.otp;

            userSchema.findOne({ _id: userId })
                .then(async (user) => {
                    if (user != null) {

                        var err = 0;
                        if (user.userLoginType == 'EMAIL') {
                            if (user.verificationOTP == otp) {
                                await userSchema.updateOne({ _id: userId }, { $set: { status: 'WAITING FOR APPROVAL' } });
                            } else {
                                err++;
                            }
                        } else {
                            const Cryptr = require('cryptr');
                            const cryptr = new Cryptr('CARGORS');

                            const accountSid = config.twilio.TWILIO_SID;
                            const authToken = config.twilio.TWILIO_AUTHTOKEN;
                            const client = require('twilio')(accountSid, authToken);

                            var sid = data.body.sid;
                            if ((sid == '1234') && (config.twilio.testMode == 'YES')) {
                                await userSchema.updateOne({ _id: userId }, { $set: { status: 'WAITING FOR APPROVAL' } });
                            } else {

                                var code = otp;
                                var phoneNo = `${user.countryCode}${user.phone}`;

                                client.verify.services(sid)
                                    .verificationChecks
                                    .create({ to: phoneNo, code: code })
                                    .then(async function (verification_check) {
                                        if (verification_check.status == 'approved') {
                                            await userSchema.updateOne({ _id: userId }, { $set: { status: 'WAITING FOR APPROVAL' } });
                                        } else {
                                            err++;

                                        }

                                    })
                                    .catch(function (err) {
                                        console.log(err);
                                        err++;
                                    });

                            }
                        }




                        if (err == 0) {

                            //ADD DATA IN USER LOGIN DEVICE TABLE
                            var userDeviceData = {
                                userId: userId,
                                appType: appType,
                                deviceToken: deviceToken
                            }

                            new userDeviceLoginSchema(userDeviceData).save(async function (err, userDev) {
                                if (err) {
                                    console.log(err);
                                    callBack({
                                        success: false,
                                        STATUSCODE: 500,
                                        message: 'Something went wrong',
                                        response_data: {}
                                    })
                                } else {
                                    var loginId = userDev._id;
                                    const authToken = generateToken(user);

                                    let response = {
                                        userDetails: {
                                            fullName: user.fullName,
                                            userName: user.userName,
                                            email: user.email,
                                            countryCode: user.countryCode,
                                            phone: user.phone,
                                            userId: user._id,
                                            loginId: loginId,
                                            profileImage: `${config.fileUrl}profile-pic/` + user.profileImage
                                        },
                                        authToken: authToken
                                    }

                                    if (user.profileImage != '') {
                                        response.userDetails.profileImage = `${config.fileUrl}profile-pic/` + user.profileImage
                                    } else {
                                        response.userDetails.profileImage = ''
                                    }

                                    callBack({
                                        success: true,
                                        STATUSCODE: 200,
                                        message: 'Logged in successfully',
                                        response_data: response
                                    })
                                }
                            })

                        } else {
                            callBack({
                                success: false,
                                STATUSCODE: 422,
                                message: 'Invalid verification code',
                                response_data: {}
                            })
                        }











                    } else {
                        callBack({
                            success: false,
                            STATUSCODE: 422,
                            message: 'User not found.',
                            response_data: {}
                        });
                    }

                })
                .catch(function (err) {
                    console.log(err);
                    callBack({
                        success: false,
                        STATUSCODE: 500,
                        message: 'Something went wrong',
                        response_data: {}
                    })
                })






        }
    },
    forgotPassword: (req, callBack) => {
        if (req) {
            var data = req.body;
            var email = req.body.email;

            if (/^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/.test(data.user)) {
                var loginCond = { email: data.user };
                loginUser = 'EMAIL';
                loginErrMsg = 'Invalid email or password'
            }
            else {
                var loginCond = { phone: data.user };
                loginUser = 'PHONE';
                loginErrMsg = 'Invalid phone or password'
            }


            userSchema.findOne(loginCond, async function (err, customer) {
                if (err) {
                    callBack({
                        success: false,
                        STATUSCODE: 500,
                        message: 'Internal DB error',
                        response_data: {}
                    });
                } else {
                    if (customer) {

                        if (customer.userLoginType == 'EMAIL') {
                            let forgotPasswordOtp = Math.random().toString().replace('0.', '').substr(0, 6);
                            customer = customer.toObject();
                            customer.forgotPasswordOtp = forgotPasswordOtp;
                            try {
                                mail('forgotPasswordMail')(customer.email, customer).send();

                                await userSchema.updateOne({ _id: customer._id }, { $set: { fpOTP: forgotPasswordOtp } });

                                callBack({
                                    success: true,
                                    STATUSCODE: 200,
                                    message: 'Please check your email. We have sent a code to be used to reset password.',
                                    response_data: {
                                        id: customer._id,
                                        user: data.user,
                                        sid: '1234'
                                    }
                                });
                            } catch (Error) {
                                console.log(Error);
                                console.log('Something went wrong while sending email');

                                callBack({
                                    success: false,
                                    STATUSCODE: 500,
                                    message: 'Something went wrong while sending email',
                                    response_data: {}
                                });
                            }

                        } else {
                            var userResp = await sendSMS(customer.countryCode, customer.phone);

                            callBack({
                                success: true,
                                STATUSCODE: 200,
                                message: 'Please check your phone. We have sent a code to be used to reset password.',
                                response_data: {
                                    id: customer._id,
                                    user: data.user,
                                    sid: '1234'
                                }
                            });
                        }
                    } else {
                        callBack({
                            success: false,
                            STATUSCODE: 422,
                            message: 'User not found',
                            response_data: {}
                        });
                    }
                }
            })
        }
    },
    resendOTP: (req, callBack) => {
        if (req) {
            var data = req.body;
            var userId = req.body.userId;
            var type = req.body.type;




            userSchema.findOne({ _id: userId }, async function (err, customer) {
                if (err) {
                    callBack({
                        success: false,
                        STATUSCODE: 500,
                        message: 'Internal DB error',
                        response_data: {}
                    });
                } else {
                    if (customer) {
                        if (type == 'SIGN_UP') {
                            if (customer.userLoginType == 'EMAIL') {

                                var userOtp = await sendVerificationCode(customer);

                                var respData = {
                                    userId: customer._id,
                                    sid: '1234'
                                }
                                callBack({
                                    success: true,
                                    STATUSCODE: 200,
                                    message: 'Please check your email. We have sent a code to be used to verify your account.',
                                    response_data: {
                                        id: customer._id,
                                        sid: '1234'
                                    }
                                });
                            } else {
                                var userResp = await sendSMS(customer.countryCode, customer.phone);

                                var respData = {
                                    userId: customer._id,
                                    sid: userResp.serviceSid
                                }

                                callBack({
                                    success: true,
                                    STATUSCODE: 200,
                                    message: 'Please check your email. We have sent a code to be used to verify your account.',
                                    response_data: {
                                        id: customer._id,
                                        sid: userResp.serviceSid
                                    }
                                });
                            }


                        } else {


                            if (customer.userLoginType == 'EMAIL') {
                                let forgotPasswordOtp = Math.random().toString().replace('0.', '').substr(0, 6);
                                customer = customer.toObject();
                                customer.forgotPasswordOtp = forgotPasswordOtp;
                                try {
                                    mail('forgotPasswordMail')(customer.email, customer).send();

                                    await userSchema.updateOne({ _id: customer._id }, { $set: { fpOTP: forgotPasswordOtp } });

                                    callBack({
                                        success: true,
                                        STATUSCODE: 200,
                                        message: 'Please check your email. We have sent a code to be used to reset password.',
                                        response_data: {
                                            id: customer._id,
                                            sid: '1234'
                                        }
                                    });
                                } catch (Error) {
                                    console.log(Error);
                                    console.log('Something went wrong while sending email');

                                    callBack({
                                        success: false,
                                        STATUSCODE: 500,
                                        message: 'Something went wrong while sending email',
                                        response_data: {}
                                    });
                                }

                            } else {
                                var userResp = await sendSMS(customer.countryCode, customer.phone);

                                callBack({
                                    success: true,
                                    STATUSCODE: 200,
                                    message: 'Please check your phone. We have sent a code to be used to reset password.',
                                    response_data: {
                                        id: customer._id,
                                        sid: userResp.serviceSid
                                    }
                                });
                            }
                        }
                    } else {
                        callBack({
                            success: false,
                            STATUSCODE: 422,
                            message: 'User not found',
                            response_data: {}
                        });
                    }
                }
            })
        }
    },
    fpVerifyUser: (req, callBack) => {
        if (req) {
            var data = req.body;

            var userId = data.userId;
            var sid = data.sid;
            var otp = data.otp;

            userSchema.findOne({ _id: userId })
                .then(async (user) => {
                    if (user != null) {

                        var err = 0;
                        if (user.userLoginType == 'EMAIL') {
                            if (user.fpOTP == otp) {
                                callBack({
                                    success: true,
                                    STATUSCODE: 200,
                                    message: 'Verified successfully',
                                    response_data: {
                                        userId: userId
                                    }
                                })
                            } else {
                                err++;
                            }
                        } else {
                            const Cryptr = require('cryptr');
                            const cryptr = new Cryptr('CARGORS');

                            const accountSid = config.twilio.TWILIO_SID;
                            const authToken = config.twilio.TWILIO_AUTHTOKEN;
                            const client = require('twilio')(accountSid, authToken);

                            var sid = data.sid;
                            if ((sid == '1234') && (config.twilio.testMode == 'YES')) {
                                callBack({
                                    success: true,
                                    STATUSCODE: 200,
                                    message: 'Verified successfully',
                                    response_data: {
                                        userId: userId
                                    }
                                })
                            } else {

                                var code = otp;
                                var phoneNo = `${user.countryCode}${user.phone}`;

                                client.verify.services(sid)
                                    .verificationChecks
                                    .create({ to: phoneNo, code: code })
                                    .then(async function (verification_check) {
                                        if (verification_check.status == 'approved') {
                                            callBack({
                                                success: true,
                                                STATUSCODE: 200,
                                                message: 'Verified successfully',
                                                response_data: {
                                                    userId: userId
                                                }
                                            })
                                        } else {
                                            err++;

                                        }

                                    })
                                    .catch(function (err) {
                                        console.log(err);
                                        err++;
                                    });

                            }
                        }




                        if (err > 0) {
                            callBack({
                                success: false,
                                STATUSCODE: 422,
                                message: 'Invalid verification code',
                                response_data: {}
                            })
                        }











                    } else {
                        callBack({
                            success: false,
                            STATUSCODE: 422,
                            message: 'User not found.',
                            response_data: {}
                        });
                    }

                })
                .catch(function (err) {
                    console.log(err);
                    callBack({
                        success: false,
                        STATUSCODE: 500,
                        message: 'Something went wrong',
                        response_data: {}
                    })
                })






        }
    },
    resetPassword: (req, callBack) => {
        if (req) {
            var data = req.body;

            var userId = data.userId;

            userSchema.findOne({ _id: userId }, function (err, user) {
                if (err) {
                    callBack({
                        success: false,
                        STATUSCODE: 500,
                        message: 'Internal DB error',
                        response_data: {}
                    });
                } else {
                    if (user) {
                        bcrypt.hash(data.password, 8, function (err, hash) {
                            if (err) {
                                callBack({
                                    success: false,
                                    STATUSCODE: 500,
                                    message: 'Something went wrong while setting the password',
                                    response_data: {}
                                });
                            } else {
                                userSchema.updateOne({ _id: user._id }, {
                                    $set: {
                                        password: hash
                                    }
                                }, async function (err, res) {
                                    if (err) {
                                        callBack({
                                            success: false,
                                            STATUSCODE: 500,
                                            message: 'Internal DB error',
                                            response_data: {}
                                        });
                                    } else {
                                        var userId = user._id;
                                        var appType = data.appType;
                                        var deviceToken = data.deviceToken;

                                        //ADD DATA IN USER LOGIN DEVICE TABLE
                                        var userDeviceData = {
                                            userId: userId,
                                            appType: appType,
                                            deviceToken: deviceToken
                                        }

                                        new userDeviceLoginSchema(userDeviceData).save(async function (err, userDev) {
                                            if (err) {
                                                console.log(err);
                                                callBack({
                                                    success: false,
                                                    STATUSCODE: 500,
                                                    message: 'Something went wrong',
                                                    response_data: {}
                                                })
                                            } else {
                                                var loginId = userDev._id;
                                                const authToken = generateToken(user);

                                                let response = {
                                                    userDetails: {
                                                        fullName: user.fullName,
                                                        email: user.email,
                                                        countryCode: user.countryCode,
                                                        phone: '0',
                                                        userId: user._id,
                                                        loginId: loginId,
                                                        profileImage: `${config.fileUrl}profile-pic/` + user.profileImage
                                                    },
                                                    authToken: authToken
                                                }

                                                if (user.profileImage != '') {
                                                    response.userDetails.profileImage = `${config.fileUrl}profile-pic/` + user.profileImage
                                                } else {
                                                    response.userDetails.profileImage = ''
                                                }

                                                callBack({
                                                    success: true,
                                                    STATUSCODE: 200,
                                                    message: 'Password set successfully.',
                                                    response_data: response
                                                })
                                            }
                                        })

                                    }
                                })
                            }
                        })
                    } else {
                        callBack({
                            success: false,
                            STATUSCODE: 422,
                            message: 'User not found',
                            response_data: {}
                        });
                    }
                }
            })
        }
    },

    //////////////////////////////////////////////////////////

    viewProfile: (req, callBack) => {
        if (req) {
            var data = req.body;
            userSchema.findOne({ _id: data.userId }, function (err, customer) {
                if (err) {
                    callBack({
                        success: false,
                        STATUSCODE: 500,
                        message: 'Internal DB error',
                        response_data: {}
                    });
                } else {
                    if (customer) {
                        let response = {
                            fullName: customer.fullName,
                            email: customer.email,
                            phone: customer.phone,
                            gender: customer.gender,
                            countryCode: customer.countryCode,
                            dateOfBirth: customer.dateOfBirth
                        }

                        if (customer.profileImage != '') {
                            response.profileImage = `${config.fileUrl}profile-pic/` + customer.profileImage
                        } else {
                            response.profileImage = ''
                        }
                        callBack({
                            success: true,
                            STATUSCODE: 200,
                            message: 'User profile fetched successfully',
                            response_data: response
                        })

                    } else {
                        callBack({
                            success: false,
                            STATUSCODE: 422,
                            message: 'User not found',
                            response_data: {}
                        });
                    }
                }
            });

        }
    },
    updateProfile: (req, callBack) => {
        if (req) {

            var data = req.body;

            userSchema.findOne({ _id: data.userId }, function (err, customer) {
                if (err) {
                    callBack({
                        success: false,
                        STATUSCODE: 500,
                        message: 'Internal DB error',
                        response_data: {}
                    });
                } else {
                    if (customer) {
                        let updateData = {
                            fullName: data.fullName,
                            email: data.email,
                            gender: data.gender,
                            countryCode: data.countryCode,
                            phone: data.phone,
                            relationship: data.relationship
                        }

                        userSchema.updateOne({ _id: data.userId }, {
                            $set: updateData
                        }, function (err, res) {
                            if (err) {
                                console.log(err);
                                callBack({
                                    success: false,
                                    STATUSCODE: 500,
                                    message: 'Internal DB error',
                                    response_data: {}
                                });
                            } else {

                                if (res.nModified == 1) {
                                    callBack({
                                        success: true,
                                        STATUSCODE: 200,
                                        message: 'User updated Successfully',
                                        response_data: {}
                                    });
                                } else {
                                    callBack({
                                        success: false,
                                        STATUSCODE: 422,
                                        message: 'Something went wrong',
                                        response_data: {}
                                    });
                                }

                            }
                        });
                    } else {
                        callBack({
                            success: false,
                            STATUSCODE: 422,
                            message: 'User not found',
                            response_data: {}
                        });
                    }



                }
            });
        }
    },
    changePassword: (req, callBack) => {
        if (req) {
            var data = req.body;
            userSchema.findOne({ _id: data.userId }, function (err, result) {
                if (err) {
                    callBack({
                        success: false,
                        STATUSCODE: 500,
                        message: 'Internal DB error',
                        response_data: {}
                    });
                } else {
                    if (result) {
                        const comparePass = bcrypt.compareSync(data.oldPassword, result.password);
                        if (comparePass) {

                            bcrypt.hash(data.newPassword, 8, function (err, hash) {
                                if (err) {
                                    callBack({
                                        success: false,
                                        STATUSCODE: 500,
                                        message: 'Something went wrong',
                                        response_data: {}
                                    });
                                } else {
                                    userSchema.updateOne({ _id: data.userId }, {
                                        $set: {
                                            password: hash
                                        }
                                    }, function (err, res) {
                                        if (err) {
                                            callBack({
                                                success: false,
                                                STATUSCODE: 500,
                                                message: 'Internal DB error',
                                                response_data: {}
                                            });
                                        } else {
                                            callBack({
                                                success: true,
                                                STATUSCODE: 200,
                                                message: 'Password updated successfully',
                                                response_data: {}
                                            });
                                        }
                                    })
                                }
                            })
                        } else {
                            callBack({
                                success: false,
                                STATUSCODE: 422,
                                message: 'Invalid old password',
                                response_data: {}
                            });
                        }
                    } else {
                        callBack({
                            success: false,
                            STATUSCODE: 422,
                            message: 'User not found',
                            response_data: {}
                        });
                    }
                }
            });




        }
    },
    profileImageUpload: (data, callBack) => {
        if (data) {

            userSchema.findOne({ _id: data.body.userId }, function (err, result) {
                if (err) {
                    callBack({
                        success: false,
                        STATUSCODE: 500,
                        message: 'Internal DB error',
                        response_data: {}
                    });
                } else {
                    if (result) {
                        if (result.profileImage != '') {
                            var fs = require('fs');
                            var filePath = `public/img/profile-pic/${result.profileImage}`;
                            fs.unlink(filePath, (err) => { });
                        }

                        //Get image extension
                        var ext = getExtension(data.files.image.name);

                        // The name of the input field (i.e. "image") is used to retrieve the uploaded file
                        let sampleFile = data.files.image;

                        var file_name = `customerprofile-${Math.floor(Math.random() * 1000)}-${Math.floor(Date.now() / 1000)}.${ext}`;

                        // Use the mv() method to place the file somewhere on your server
                        sampleFile.mv(`public/img/profile-pic/${file_name}`, function (err) {
                            if (err) {
                                callBack({
                                    success: false,
                                    STATUSCODE: 500,
                                    message: 'Internal error',
                                    response_data: {}
                                });
                            } else {


                                userSchema.updateOne({ _id: data.body.userId }, {
                                    $set: { profileImage: file_name }
                                }, function (err, res) {
                                    if (err) {
                                        callBack({
                                            success: false,
                                            STATUSCODE: 500,
                                            message: 'Internal DB error',
                                            response_data: {}
                                        });
                                    } else {

                                        callBack({
                                            success: true,
                                            STATUSCODE: 200,
                                            message: 'Profile image updated successfully',
                                            response_data: { profileImage: `${config.fileUrl}profile-pic/` + file_name }
                                        });
                                    }
                                })
                            }
                        });
                    }
                }
            });


        }
    },
    logout: (req, callBack) => {
        if (req) {
            var data = req.body;
            var loginId = data.loginId;
            userDeviceLoginSchema.deleteOne({ _id: loginId }, function (err) {
                if (err) {
                    console.log(err);
                }
                // deleted at most one tank document
            });
            callBack({
                success: true,
                STATUSCODE: 200,
                message: 'User logged out successfully',
                response_data: {}
            })
        }
    },
    searchUser: (req, callBack) => {
        if (req) {
            var data = req.body;
            var searchVal = data.search;
            var userId = data.userId;

            userSchema.find({
                fullName: { '$regex': searchVal, '$options': 'i' },
                status: 'ACTIVE',
                _id: { $ne: userId }
            })
                .then(async (searchRes) => {

                    console.log('searchRes', searchRes);

                    var searchArr = [];
                    if (searchRes.length > 0) {
                        for (let searchrs of searchRes) {
                            var searchObj = {
                                profileImage: searchrs.profileImage,
                                fullName: searchrs.fullName
                            };

                            var andReqCondObj = {};
                            var reqArr = [];
                            var reqCondOne = { $and: [{ userId: (searchrs._id).toString() }, { circleUserId: userId }] };
                            var reqCondTwo = { $and: [{ userId: userId }, { circleUserId: (searchrs._id).toString() }] };

                            reqArr.push(reqCondOne);
                            reqArr.push(reqCondTwo);

                            andReqCondObj['$or'] = reqArr;

                            console.log('andReqCondObj', andReqCondObj);

                            var mapIC = await mapUserInnerCircleSchema.findOne(andReqCondObj);

                            if (mapIC != null) {
                                searchObj['circle'] = 'YES'
                            } else {
                                searchObj['circle'] = 'NO'
                            }

                            // console.log('mapIC',mapIC);

                            searchArr.push(searchObj);

                        }
                    }


                    callBack({
                        success: true,
                        STATUSCODE: 200,
                        message: 'Search result',
                        response_data: { data: searchArr, userImageUrl: `${config.serverhost}:${config.port}/img/profile-pic/` }
                    });

                })
                .catch((err) => {
                    console.log('err', err);
                    callBack({
                        success: false,
                        STATUSCODE: 500,
                        message: 'Internal DB error',
                        response_data: {}
                    });
                })

        }
    },
    getUser: (req, callBack) => {
        if (req) {
            var data = req.body;
            var userId = data.userId;

            userSchema.find({
                status: 'ACTIVE',
                _id: { $ne: userId }
            })
                .then(async (searchRes) => {

                    console.log('searchRes', searchRes);

                    var searchArr = [];
                    if (searchRes.length > 0) {
                        for (let searchrs of searchRes) {
                            var searchObj = {
                                profileImage: searchrs.profileImage,
                                fullName: searchrs.fullName
                            };


                            // console.log('mapIC',mapIC);

                            searchArr.push(searchObj);

                        }
                    }


                    callBack({
                        success: true,
                        STATUSCODE: 200,
                        message: 'User result',
                        response_data: { data: searchArr, userImageUrl: `${config.serverhost}:${config.port}/img/profile-pic/` }
                    });

                })
                .catch((err) => {
                    console.log('err', err);
                    callBack({
                        success: false,
                        STATUSCODE: 500,
                        message: 'Internal DB error',
                        response_data: {}
                    });
                })

        }
    },

}


function genrateToken(userData) {
    let payload = { subject: userData._id, user: 'CUSTOMER' };
    return jwt.sign(payload, config.secretKey, { expiresIn: '3600000h' })
}

function getExtension(filename) {
    return filename.substring(filename.indexOf('.') + 1);
}

function sendVerificationCode(customer) {
    return new Promise(async function (resolve, reject) {

        let otp = Math.random().toString().replace('0.', '').substr(0, 6);
        customer = customer.toObject();
        customer.otp = otp;
        try {
            mail('sendOTPdMail')(customer.email, customer).send();
            var resp = {
                otp: otp
            }

            await userSchema.updateOne({ _id: customer._id }, { $set: { verificationOTP: otp } });

            return resolve(resp);


        } catch (Error) {
            console.log(Error);
            return reject();
        }



    });

}




function sendSMS(countryCode, phone) {
    return new Promise(function (resolve, reject) {
        var twilioMode = config.twilio.testMode;
        if (twilioMode == 'YES') {
            var resp = {
                serviceSid: '1234'
            }
            return resolve(resp);
        } else {
            //Twilio


            const accountSid = config.twilio.TWILIO_SID;
            const authToken = config.twilio.TWILIO_AUTHTOKEN;

            var frndlyName = config.twilio.friendlyName;

            const client = require('twilio')(accountSid, authToken);


            client.verify.services.create({ friendlyName: frndlyName })
                .then(function (service) {

                    var sid = service.sid;
                    var phoneNo = `${countryCode}${phone}`;

                    client.verify.services(sid)
                        .verifications
                        .create({ to: phoneNo, channel: 'sms' })
                        .then(function (verification) {
                            console.log(verification);
                            if (verification.status == 'pending') {
                                return resolve(verification);
                            } else {
                                return reject(verification);
                            }
                        })
                        .catch(function (err) {
                            return reject(err);
                        })
                })
                .catch(function (err) {
                    return reject(err);
                })
        }

    });
}

function getUserPostDetails(userId) {
    return new Promise(async function (resolve, reject) {

        var userPost = await userPostSchema.find({ userId: userId }).sort({ createdAt: 'desc' });

        // console.log('userPost',userPost);
        var userPostArr = [];
        if (userPost.length > 0) {
            for (let userPst of userPost) {
                console.log('postId', userPst._id);
                var userID = (userPst.userId).toString();
                var userProf = await userSchema.findOne({ _id: userID })
                var userPostObj = {
                    userId: userPst.userId,
                    postId: (userPst._id).toString(),
                    name: userProf.fullName,
                    caption: userPst.caption,
                    postDate: userPst.createdAt,
                    like: '0',
                    comment: '0'
                }



                var userPostLike = await userPostLikeSchema.countDocuments({ postId: (userPst._id).toString() })
                userPostObj.like = userPostLike.toString();

                var userPostLike = await userPostCommentSchema.countDocuments({ postId: (userPst._id).toString() })
                userPostObj.comment = userPostLike.toString();

                var userPostLike = await userPostShareSchema.countDocuments({ postId: (userPst._id).toString() })
                userPostObj.share = userPostLike.toString();

                var userPostLikeSelf = await userPostLikeSchema.countDocuments({ userId: userId, postId: (userPst._id).toString() })

                if (Number(userPostLikeSelf) > 0) {
                    userPostObj.selfLike = true
                } else {
                    userPostObj.selfLike = false
                }

                if (userProf.profileImage != '') {
                    userPostObj.profileImage = `${config.serverhost}:${config.port}/img/profile-pic/` + userProf.profileImage
                } else {
                    userPostObj.profileImage = ''
                }

                var postId = (userPst._id).toString();

                var userImageArr = await userFileSchema.find({ userId: userID, postId: postId });

                var userImgArr = [];
                if (userImageArr.length > 0) {
                    for (let userImage of userImageArr) {
                        userImgArr.push(`${config.serverhost}:${config.port}/img/post/${userImage.file}`)
                    }
                    userPostObj.imageArr = userImgArr;

                }


                userPostArr.push(userPostObj);

            }
        }

        return resolve(userPostArr);



    });

}
